1）当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时。

    2）当构造过程必须允许被构造的对象有不同的表示时。

    抽象基类：

    1）Builder：这个基类是全部创建对象过程的抽象，提供构建不同组成部分的接口函数

    接口：

    1）Builder：：BuildPartA，Builder：：BuildPartB：是对一个对象不同部分的构建函数接口，Builder的派生类来具体实现。

    另外还有一个需要注意的函数，就是Director：：Construct函数，这个函数里面通过调用上面的两个接口函数完成对象的构建――也就是说各个不同部分装配的过程都是一致的（同样的调用的Construct函数），但是不同的构建方式会有不同的表示（根据Builder的实际类型来决定如何构建，也就是多态）

    解析：

    Builder模式是基于这样的一个情况：一个对象可能有不同的组成部分，这几个部分的不同的创建对象会有不同的表示，但是各个部分之间装配的方式是一致的。比方说一辆单车，都是由车轮车座等等的构成的（一个对象不同的组成部分），不同的品牌生产出来的也不一样（不同的构建方式）。虽然不同的品牌构建出来的单车不同，但是构建的过程还是一样的（哦，你见过车轮长在车座上的么？）。